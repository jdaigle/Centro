#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cridion.Framework.FileSystem.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class FileExplorerDBContext : System.Data.Linq.DataContext
	{
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccessControlList(AccessControlList instance);
    partial void UpdateAccessControlList(AccessControlList instance);
    partial void DeleteAccessControlList(AccessControlList instance);
    partial void InsertACLMember(ACLMember instance);
    partial void UpdateACLMember(ACLMember instance);
    partial void DeleteACLMember(ACLMember instance);
    partial void InsertDirectory(Directory instance);
    partial void UpdateDirectory(Directory instance);
    partial void DeleteDirectory(Directory instance);
    partial void InsertFileBinary(FileBinary instance);
    partial void UpdateFileBinary(FileBinary instance);
    partial void DeleteFileBinary(FileBinary instance);
    partial void InsertFile(File instance);
    partial void UpdateFile(File instance);
    partial void DeleteFile(File instance);
    partial void InsertFileVersion(FileVersion instance);
    partial void UpdateFileVersion(FileVersion instance);
    partial void DeleteFileVersion(FileVersion instance);
    #endregion
		
		public FileExplorerDBContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FileExplorerDBContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccessControlList> AccessControlLists
		{
			get
			{
				return this.GetTable<AccessControlList>();
			}
		}
		
		public System.Data.Linq.Table<ACLMember> ACLMembers
		{
			get
			{
				return this.GetTable<ACLMember>();
			}
		}
		
		public System.Data.Linq.Table<Directory> Directories
		{
			get
			{
				return this.GetTable<Directory>();
			}
		}
		
		public System.Data.Linq.Table<FileBinary> FileBinaries
		{
			get
			{
				return this.GetTable<FileBinary>();
			}
		}
		
		public System.Data.Linq.Table<File> Files
		{
			get
			{
				return this.GetTable<File>();
			}
		}
		
		public System.Data.Linq.Table<FileVersion> FileVersions
		{
			get
			{
				return this.GetTable<FileVersion>();
			}
		}
		
		public int Sp_CreateDefaultAccessControlList(System.Nullable<int> directoryid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), directoryid);
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_CreateNewRootDirectory(string directoryname)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), directoryname);
			return ((int)(result.ReturnValue));
		}
		
		public int Sp_GrantAdminPermission(string membername, System.Nullable<int> directoryid)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), membername, directoryid);
			return ((int)(result.ReturnValue));
		}
	}
	
	public partial class AccessControlList : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Aclid;
		
		private long _Directoryid;
		
		private bool _Aclreadall;
		
		private bool _Aclchangeall;
		
		private bool _Acladminall;
		
		private bool _Inherit;
		
		private EntityRef<Directory> _Directory;
		
		private EntitySet<ACLMember> _ACLMembers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAclidChanging(long value);
    partial void OnAclidChanged();
    partial void OnDirectoryidChanging(long value);
    partial void OnDirectoryidChanged();
    partial void OnAclreadallChanging(bool value);
    partial void OnAclreadallChanged();
    partial void OnAclchangeallChanging(bool value);
    partial void OnAclchangeallChanged();
    partial void OnAcladminallChanging(bool value);
    partial void OnAcladminallChanged();
    partial void OnInheritChanging(bool value);
    partial void OnInheritChanged();
    #endregion
		
		public AccessControlList()
		{
			this._Directory = default(EntityRef<Directory>);
			this._ACLMembers = new EntitySet<ACLMember>(new Action<ACLMember>(this.attach_ACLMembers), new Action<ACLMember>(this.detach_ACLMembers));
			OnCreated();
		}
		
		public long Aclid
		{
			get
			{
				return this._Aclid;
			}
			set
			{
				if ((this._Aclid != value))
				{
					this.OnAclidChanging(value);
					this.SendPropertyChanging();
					this._Aclid = value;
					this.SendPropertyChanged("Aclid");
					this.OnAclidChanged();
				}
			}
		}
		
		public long Directoryid
		{
			get
			{
				return this._Directoryid;
			}
			set
			{
				if ((this._Directoryid != value))
				{
					this.OnDirectoryidChanging(value);
					this.SendPropertyChanging();
					this._Directoryid = value;
					this.SendPropertyChanged("Directoryid");
					this.OnDirectoryidChanged();
				}
			}
		}
		
		public bool Aclreadall
		{
			get
			{
				return this._Aclreadall;
			}
			set
			{
				if ((this._Aclreadall != value))
				{
					this.OnAclreadallChanging(value);
					this.SendPropertyChanging();
					this._Aclreadall = value;
					this.SendPropertyChanged("Aclreadall");
					this.OnAclreadallChanged();
				}
			}
		}
		
		public bool Aclchangeall
		{
			get
			{
				return this._Aclchangeall;
			}
			set
			{
				if ((this._Aclchangeall != value))
				{
					this.OnAclchangeallChanging(value);
					this.SendPropertyChanging();
					this._Aclchangeall = value;
					this.SendPropertyChanged("Aclchangeall");
					this.OnAclchangeallChanged();
				}
			}
		}
		
		public bool Acladminall
		{
			get
			{
				return this._Acladminall;
			}
			set
			{
				if ((this._Acladminall != value))
				{
					this.OnAcladminallChanging(value);
					this.SendPropertyChanging();
					this._Acladminall = value;
					this.SendPropertyChanged("Acladminall");
					this.OnAcladminallChanged();
				}
			}
		}
		
		public bool Inherit
		{
			get
			{
				return this._Inherit;
			}
			set
			{
				if ((this._Inherit != value))
				{
					this.OnInheritChanging(value);
					this.SendPropertyChanging();
					this._Inherit = value;
					this.SendPropertyChanged("Inherit");
					this.OnInheritChanged();
				}
			}
		}
		
		public Directory Directory
		{
			get
			{
				return this._Directory.Entity;
			}
			set
			{
				Directory previousValue = this._Directory.Entity;
				if (((previousValue != value) 
							|| (this._Directory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directory.Entity = null;
						previousValue.AccessControlLists.Remove(this);
					}
					this._Directory.Entity = value;
					if ((value != null))
					{
						value.AccessControlLists.Add(this);
						this._Directoryid = value.Directoryid;
					}
					else
					{
						this._Directoryid = default(long);
					}
					this.SendPropertyChanged("Directory");
				}
			}
		}
		
		public EntitySet<ACLMember> ACLMembers
		{
			get
			{
				return this._ACLMembers;
			}
			set
			{
				this._ACLMembers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ACLMembers(ACLMember entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = this;
		}
		
		private void detach_ACLMembers(ACLMember entity)
		{
			this.SendPropertyChanging();
			entity.AccessControlList = null;
		}
	}
	
	public partial class ACLMember : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Aclmemberid;
		
		private long _Aclid;
		
		private string _Membername;
		
		private bool _Aclread;
		
		private bool _Aclchange;
		
		private bool _Acladmin;
		
		private EntityRef<AccessControlList> _AccessControlList;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAclmemberidChanging(long value);
    partial void OnAclmemberidChanged();
    partial void OnAclidChanging(long value);
    partial void OnAclidChanged();
    partial void OnMembernameChanging(string value);
    partial void OnMembernameChanged();
    partial void OnAclreadChanging(bool value);
    partial void OnAclreadChanged();
    partial void OnAclchangeChanging(bool value);
    partial void OnAclchangeChanged();
    partial void OnAcladminChanging(bool value);
    partial void OnAcladminChanged();
    #endregion
		
		public ACLMember()
		{
			this._AccessControlList = default(EntityRef<AccessControlList>);
			OnCreated();
		}
		
		public long Aclmemberid
		{
			get
			{
				return this._Aclmemberid;
			}
			set
			{
				if ((this._Aclmemberid != value))
				{
					this.OnAclmemberidChanging(value);
					this.SendPropertyChanging();
					this._Aclmemberid = value;
					this.SendPropertyChanged("Aclmemberid");
					this.OnAclmemberidChanged();
				}
			}
		}
		
		public long Aclid
		{
			get
			{
				return this._Aclid;
			}
			set
			{
				if ((this._Aclid != value))
				{
					this.OnAclidChanging(value);
					this.SendPropertyChanging();
					this._Aclid = value;
					this.SendPropertyChanged("Aclid");
					this.OnAclidChanged();
				}
			}
		}
		
		public string Membername
		{
			get
			{
				return this._Membername;
			}
			set
			{
				if ((this._Membername != value))
				{
					this.OnMembernameChanging(value);
					this.SendPropertyChanging();
					this._Membername = value;
					this.SendPropertyChanged("Membername");
					this.OnMembernameChanged();
				}
			}
		}
		
		public bool Aclread
		{
			get
			{
				return this._Aclread;
			}
			set
			{
				if ((this._Aclread != value))
				{
					this.OnAclreadChanging(value);
					this.SendPropertyChanging();
					this._Aclread = value;
					this.SendPropertyChanged("Aclread");
					this.OnAclreadChanged();
				}
			}
		}
		
		public bool Aclchange
		{
			get
			{
				return this._Aclchange;
			}
			set
			{
				if ((this._Aclchange != value))
				{
					this.OnAclchangeChanging(value);
					this.SendPropertyChanging();
					this._Aclchange = value;
					this.SendPropertyChanged("Aclchange");
					this.OnAclchangeChanged();
				}
			}
		}
		
		public bool Acladmin
		{
			get
			{
				return this._Acladmin;
			}
			set
			{
				if ((this._Acladmin != value))
				{
					this.OnAcladminChanging(value);
					this.SendPropertyChanging();
					this._Acladmin = value;
					this.SendPropertyChanged("Acladmin");
					this.OnAcladminChanged();
				}
			}
		}
		
		public AccessControlList AccessControlList
		{
			get
			{
				return this._AccessControlList.Entity;
			}
			set
			{
				AccessControlList previousValue = this._AccessControlList.Entity;
				if (((previousValue != value) 
							|| (this._AccessControlList.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessControlList.Entity = null;
						previousValue.ACLMembers.Remove(this);
					}
					this._AccessControlList.Entity = value;
					if ((value != null))
					{
						value.ACLMembers.Add(this);
						this._Aclid = value.Aclid;
					}
					else
					{
						this._Aclid = default(long);
					}
					this.SendPropertyChanged("AccessControlList");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class Directory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Directoryid;
		
		private string _Directoryname;
		
		private long _Parentdirectoryid;
		
		private bool _Directorydeleted;
		
		private bool _Rootdirectory;
		
		private EntitySet<AccessControlList> _AccessControlLists;
		
		private EntitySet<File> _Files;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDirectoryidChanging(long value);
    partial void OnDirectoryidChanged();
    partial void OnDirectorynameChanging(string value);
    partial void OnDirectorynameChanged();
    partial void OnParentdirectoryidChanging(long value);
    partial void OnParentdirectoryidChanged();
    partial void OnDirectorydeletedChanging(bool value);
    partial void OnDirectorydeletedChanged();
    partial void OnRootdirectoryChanging(bool value);
    partial void OnRootdirectoryChanged();
    #endregion
		
		public Directory()
		{
			this._AccessControlLists = new EntitySet<AccessControlList>(new Action<AccessControlList>(this.attach_AccessControlLists), new Action<AccessControlList>(this.detach_AccessControlLists));
			this._Files = new EntitySet<File>(new Action<File>(this.attach_Files), new Action<File>(this.detach_Files));
			OnCreated();
		}
		
		public long Directoryid
		{
			get
			{
				return this._Directoryid;
			}
			set
			{
				if ((this._Directoryid != value))
				{
					this.OnDirectoryidChanging(value);
					this.SendPropertyChanging();
					this._Directoryid = value;
					this.SendPropertyChanged("Directoryid");
					this.OnDirectoryidChanged();
				}
			}
		}
		
		public string Directoryname
		{
			get
			{
				return this._Directoryname;
			}
			set
			{
				if ((this._Directoryname != value))
				{
					this.OnDirectorynameChanging(value);
					this.SendPropertyChanging();
					this._Directoryname = value;
					this.SendPropertyChanged("Directoryname");
					this.OnDirectorynameChanged();
				}
			}
		}
		
		public long Parentdirectoryid
		{
			get
			{
				return this._Parentdirectoryid;
			}
			set
			{
				if ((this._Parentdirectoryid != value))
				{
					this.OnParentdirectoryidChanging(value);
					this.SendPropertyChanging();
					this._Parentdirectoryid = value;
					this.SendPropertyChanged("Parentdirectoryid");
					this.OnParentdirectoryidChanged();
				}
			}
		}
		
		public bool Directorydeleted
		{
			get
			{
				return this._Directorydeleted;
			}
			set
			{
				if ((this._Directorydeleted != value))
				{
					this.OnDirectorydeletedChanging(value);
					this.SendPropertyChanging();
					this._Directorydeleted = value;
					this.SendPropertyChanged("Directorydeleted");
					this.OnDirectorydeletedChanged();
				}
			}
		}
		
		public bool Rootdirectory
		{
			get
			{
				return this._Rootdirectory;
			}
			set
			{
				if ((this._Rootdirectory != value))
				{
					this.OnRootdirectoryChanging(value);
					this.SendPropertyChanging();
					this._Rootdirectory = value;
					this.SendPropertyChanged("Rootdirectory");
					this.OnRootdirectoryChanged();
				}
			}
		}
		
		public EntitySet<AccessControlList> AccessControlLists
		{
			get
			{
				return this._AccessControlLists;
			}
			set
			{
				this._AccessControlLists.Assign(value);
			}
		}
		
		public EntitySet<File> Files
		{
			get
			{
				return this._Files;
			}
			set
			{
				this._Files.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessControlLists(AccessControlList entity)
		{
			this.SendPropertyChanging();
			entity.Directory = this;
		}
		
		private void detach_AccessControlLists(AccessControlList entity)
		{
			this.SendPropertyChanging();
			entity.Directory = null;
		}
		
		private void attach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Directory = this;
		}
		
		private void detach_Files(File entity)
		{
			this.SendPropertyChanging();
			entity.Directory = null;
		}
	}
	
	public partial class FileBinary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Filebinaryid;
		
		private System.Data.Linq.Binary _Filebinarydata;
		
		private long _Filesize;
		
		private EntitySet<FileVersion> _FileVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFilebinaryidChanging(long value);
    partial void OnFilebinaryidChanged();
    partial void OnFilebinarydataChanging(System.Data.Linq.Binary value);
    partial void OnFilebinarydataChanged();
    partial void OnFilesizeChanging(long value);
    partial void OnFilesizeChanged();
    #endregion
		
		public FileBinary()
		{
			this._FileVersions = new EntitySet<FileVersion>(new Action<FileVersion>(this.attach_FileVersions), new Action<FileVersion>(this.detach_FileVersions));
			OnCreated();
		}
		
		public long Filebinaryid
		{
			get
			{
				return this._Filebinaryid;
			}
			set
			{
				if ((this._Filebinaryid != value))
				{
					this.OnFilebinaryidChanging(value);
					this.SendPropertyChanging();
					this._Filebinaryid = value;
					this.SendPropertyChanged("Filebinaryid");
					this.OnFilebinaryidChanged();
				}
			}
		}
		
		public System.Data.Linq.Binary Filebinarydata
		{
			get
			{
				return this._Filebinarydata;
			}
			set
			{
				if ((this._Filebinarydata != value))
				{
					this.OnFilebinarydataChanging(value);
					this.SendPropertyChanging();
					this._Filebinarydata = value;
					this.SendPropertyChanged("Filebinarydata");
					this.OnFilebinarydataChanged();
				}
			}
		}
		
		public long Filesize
		{
			get
			{
				return this._Filesize;
			}
			set
			{
				if ((this._Filesize != value))
				{
					this.OnFilesizeChanging(value);
					this.SendPropertyChanging();
					this._Filesize = value;
					this.SendPropertyChanged("Filesize");
					this.OnFilesizeChanged();
				}
			}
		}
		
		public EntitySet<FileVersion> FileVersions
		{
			get
			{
				return this._FileVersions;
			}
			set
			{
				this._FileVersions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.FileBinary = this;
		}
		
		private void detach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.FileBinary = null;
		}
	}
	
	public partial class File : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Fileid;
		
		private string _Filename;
		
		private long _Directoryid;
		
		private System.DateTime _Filecreationdate;
		
		private bool _Filedeleted;
		
		private EntityRef<Directory> _Directory;
		
		private EntitySet<FileVersion> _FileVersions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileidChanging(long value);
    partial void OnFileidChanged();
    partial void OnFilenameChanging(string value);
    partial void OnFilenameChanged();
    partial void OnDirectoryidChanging(long value);
    partial void OnDirectoryidChanged();
    partial void OnFilecreationdateChanging(System.DateTime value);
    partial void OnFilecreationdateChanged();
    partial void OnFiledeletedChanging(bool value);
    partial void OnFiledeletedChanged();
    #endregion
		
		public File()
		{
			this._Directory = default(EntityRef<Directory>);
			this._FileVersions = new EntitySet<FileVersion>(new Action<FileVersion>(this.attach_FileVersions), new Action<FileVersion>(this.detach_FileVersions));
			OnCreated();
		}
		
		public long Fileid
		{
			get
			{
				return this._Fileid;
			}
			set
			{
				if ((this._Fileid != value))
				{
					this.OnFileidChanging(value);
					this.SendPropertyChanging();
					this._Fileid = value;
					this.SendPropertyChanged("Fileid");
					this.OnFileidChanged();
				}
			}
		}
		
		public string Filename
		{
			get
			{
				return this._Filename;
			}
			set
			{
				if ((this._Filename != value))
				{
					this.OnFilenameChanging(value);
					this.SendPropertyChanging();
					this._Filename = value;
					this.SendPropertyChanged("Filename");
					this.OnFilenameChanged();
				}
			}
		}
		
		public long Directoryid
		{
			get
			{
				return this._Directoryid;
			}
			set
			{
				if ((this._Directoryid != value))
				{
					this.OnDirectoryidChanging(value);
					this.SendPropertyChanging();
					this._Directoryid = value;
					this.SendPropertyChanged("Directoryid");
					this.OnDirectoryidChanged();
				}
			}
		}
		
		public System.DateTime Filecreationdate
		{
			get
			{
				return this._Filecreationdate;
			}
			set
			{
				if ((this._Filecreationdate != value))
				{
					this.OnFilecreationdateChanging(value);
					this.SendPropertyChanging();
					this._Filecreationdate = value;
					this.SendPropertyChanged("Filecreationdate");
					this.OnFilecreationdateChanged();
				}
			}
		}
		
		public bool Filedeleted
		{
			get
			{
				return this._Filedeleted;
			}
			set
			{
				if ((this._Filedeleted != value))
				{
					this.OnFiledeletedChanging(value);
					this.SendPropertyChanging();
					this._Filedeleted = value;
					this.SendPropertyChanged("Filedeleted");
					this.OnFiledeletedChanged();
				}
			}
		}
		
		public Directory Directory
		{
			get
			{
				return this._Directory.Entity;
			}
			set
			{
				Directory previousValue = this._Directory.Entity;
				if (((previousValue != value) 
							|| (this._Directory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Directory.Entity = null;
						previousValue.Files.Remove(this);
					}
					this._Directory.Entity = value;
					if ((value != null))
					{
						value.Files.Add(this);
						this._Directoryid = value.Directoryid;
					}
					else
					{
						this._Directoryid = default(long);
					}
					this.SendPropertyChanged("Directory");
				}
			}
		}
		
		public EntitySet<FileVersion> FileVersions
		{
			get
			{
				return this._FileVersions;
			}
			set
			{
				this._FileVersions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.File = this;
		}
		
		private void detach_FileVersions(FileVersion entity)
		{
			this.SendPropertyChanging();
			entity.File = null;
		}
	}
	
	public partial class FileVersion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Fileversionid;
		
		private long _Fileid;
		
		private int _Versionnumber;
		
		private long _Filebinaryid;
		
		private System.DateTime _Filemodifieddate;
		
		private bool _Latestversion;
		
		private EntityRef<FileBinary> _FileBinary;
		
		private EntityRef<File> _File;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFileversionidChanging(long value);
    partial void OnFileversionidChanged();
    partial void OnFileidChanging(long value);
    partial void OnFileidChanged();
    partial void OnVersionnumberChanging(int value);
    partial void OnVersionnumberChanged();
    partial void OnFilebinaryidChanging(long value);
    partial void OnFilebinaryidChanged();
    partial void OnFilemodifieddateChanging(System.DateTime value);
    partial void OnFilemodifieddateChanged();
    partial void OnLatestversionChanging(bool value);
    partial void OnLatestversionChanged();
    #endregion
		
		public FileVersion()
		{
			this._FileBinary = default(EntityRef<FileBinary>);
			this._File = default(EntityRef<File>);
			OnCreated();
		}
		
		public long Fileversionid
		{
			get
			{
				return this._Fileversionid;
			}
			set
			{
				if ((this._Fileversionid != value))
				{
					this.OnFileversionidChanging(value);
					this.SendPropertyChanging();
					this._Fileversionid = value;
					this.SendPropertyChanged("Fileversionid");
					this.OnFileversionidChanged();
				}
			}
		}
		
		public long Fileid
		{
			get
			{
				return this._Fileid;
			}
			set
			{
				if ((this._Fileid != value))
				{
					this.OnFileidChanging(value);
					this.SendPropertyChanging();
					this._Fileid = value;
					this.SendPropertyChanged("Fileid");
					this.OnFileidChanged();
				}
			}
		}
		
		public int Versionnumber
		{
			get
			{
				return this._Versionnumber;
			}
			set
			{
				if ((this._Versionnumber != value))
				{
					this.OnVersionnumberChanging(value);
					this.SendPropertyChanging();
					this._Versionnumber = value;
					this.SendPropertyChanged("Versionnumber");
					this.OnVersionnumberChanged();
				}
			}
		}
		
		public long Filebinaryid
		{
			get
			{
				return this._Filebinaryid;
			}
			set
			{
				if ((this._Filebinaryid != value))
				{
					this.OnFilebinaryidChanging(value);
					this.SendPropertyChanging();
					this._Filebinaryid = value;
					this.SendPropertyChanged("Filebinaryid");
					this.OnFilebinaryidChanged();
				}
			}
		}
		
		public System.DateTime Filemodifieddate
		{
			get
			{
				return this._Filemodifieddate;
			}
			set
			{
				if ((this._Filemodifieddate != value))
				{
					this.OnFilemodifieddateChanging(value);
					this.SendPropertyChanging();
					this._Filemodifieddate = value;
					this.SendPropertyChanged("Filemodifieddate");
					this.OnFilemodifieddateChanged();
				}
			}
		}
		
		public bool Latestversion
		{
			get
			{
				return this._Latestversion;
			}
			set
			{
				if ((this._Latestversion != value))
				{
					this.OnLatestversionChanging(value);
					this.SendPropertyChanging();
					this._Latestversion = value;
					this.SendPropertyChanged("Latestversion");
					this.OnLatestversionChanged();
				}
			}
		}
		
		public FileBinary FileBinary
		{
			get
			{
				return this._FileBinary.Entity;
			}
			set
			{
				FileBinary previousValue = this._FileBinary.Entity;
				if (((previousValue != value) 
							|| (this._FileBinary.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FileBinary.Entity = null;
						previousValue.FileVersions.Remove(this);
					}
					this._FileBinary.Entity = value;
					if ((value != null))
					{
						value.FileVersions.Add(this);
						this._Filebinaryid = value.Filebinaryid;
					}
					else
					{
						this._Filebinaryid = default(long);
					}
					this.SendPropertyChanged("FileBinary");
				}
			}
		}
		
		public File File
		{
			get
			{
				return this._File.Entity;
			}
			set
			{
				File previousValue = this._File.Entity;
				if (((previousValue != value) 
							|| (this._File.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._File.Entity = null;
						previousValue.FileVersions.Remove(this);
					}
					this._File.Entity = value;
					if ((value != null))
					{
						value.FileVersions.Add(this);
						this._Fileid = value.Fileid;
					}
					else
					{
						this._Fileid = default(long);
					}
					this.SendPropertyChanged("File");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
